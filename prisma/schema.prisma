generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  accounts          Account[]
  sessions          Session[]
  settings          UserSettings?
  stripeCredentials UserStripeCredentials?
  meta              UserMetadata?
  userWebhookEvents UserWebhookEvent[]
  payments          Payment[]
  Subscription      Subscription[]
  TokensPool        TokensPool?

  @@map("user")
}

model UserMetadata {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")

  paidStatus String @map("paid_status") // free / premium / suspended

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_meta_data")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model UserSettings {
  appUserSettingsId String @id @default(cuid()) @map("app_user_settings_id")
  userId            String @unique @map("user_id")

  emailWebhookNotifications Boolean @default(true) @map("email_webhook_notifications")
  emailToNotify             String? @map("email_to_notify")
  frequency                 String? @map("frequency") // daily, weekly, monthly

  userCriticalEvents String[] @default([]) @map("user_critical_events")

  appUser User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model UserStripeCredentials {
  id             String  @id @default(cuid()) @map("id")
  userId         String  @unique @map("user_id")
  accessToken    String? @map("access_token")
  refreshToken   String? @map("refresh_token")
  accountId      String? @unique @map("account_id")
  publishableKey String? @map("publishable_key")

  apiKey        String? @map("api_key") // For non-connect users
  webhookUrl    String? @map("webhook_url") // For non-connect users
  webhookId     String? @map("webhook_id") // For non-connect users
  webhookSecret String? @map("webhook_secret") // For non-connect users

  connected Boolean @default(true) @map("connected")

  createdAt DateTime @default(now()) @map("created_at")
  udpatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stripe_credentials")
}

model UserWebhookEvent {
  id       String  @id @default(cuid()) @map("id")
  userId   String  @map("user_id")
  eventId  String  @map("event_id")
  livemode Boolean @map("livemode")
  type     String  @map("type") // checkout.session.completed, payment_intent.succeeded, etc
  created  Int     @map("created")

  pendingWebhooks Int @map("pending_web_hooks")
  timeToComplete  Int @map("time_to_complete")

  succeeded Boolean @map("succeeded")

  connected Boolean @default(true) @map("connected")

  requestId             String? @map("request_id")
  requestIdempotencyKey String? @map("request_idempotency_key")

  userNotifiedAt DateTime? @map("user_notified_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  resolvedAt DateTime? @map("resolved_at")

  appUser    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailsSent EmailSent[]

  @@map("user_webhook_event")
}

model Payment {
  id             String  @id @default(cuid()) @map("id")
  userId         String  @map("user_id")
  priceId        String  @map("price_id")
  sessionId      String  @map("session_id")
  productId      String  @map("product_id")
  subscriptionId String? @unique @map("subscription_id")

  productName     String  @map("product_name")
  amountReceived  Int     @map("amount_received")
  currency        String  @map("currency")
  status          String  @map("status")
  paymentMethodId String? @map("payment_method_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  appUser User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment")
}

model Subscription {
  id             String @id @default(cuid()) @map("id")
  userId         String @map("user_id")
  subscriptionId String @unique @map("subscription_id")
  productId      String @map("product_id")

  tokens Int    @map("tokens")
  status String @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  appUser User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

model TokensPool {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")
  tokens Int    @map("tokens")

  tokensUsed      Int @map("tokens_used")
  tokensRemaining Int @map("tokens_remaining")

  lastRefillAt DateTime @map("last_refill_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  appUser User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens_pool")
}

model InterestedUser {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("interested_user")
}

model EmailSent {
  id    String @id @default(cuid())
  email String

  sentToCustomer Boolean @default(false) @map("sent_to_customer")
  webhookEventId String? @map("webhook_event_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  webhookEvent UserWebhookEvent? @relation(fields: [webhookEventId], references: [id])

  @@map("email_sent")
}
